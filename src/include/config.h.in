#pragma once

#include <strings.h>

namespace theprojectname {

class Version {
    public:
        Version(int major, int minor, int patch):
            _major(major), _minor(minor), _patch(patch) {  };

        inline std::string operator()() const {return to_str(); }

        inline std::string to_str() const
        {
            return strings::sprintf("%d.%d.%d", _major, _minor, _patch);
        }

        inline bool operator==(const Version& v) { return _ver() == v._ver(); }
        inline bool operator!=(const Version& v) { return _ver() != v._ver(); }
        inline bool operator< (const Version& v) { return _ver() < v._ver(); }
        inline bool operator> (const Version& v) { return _ver() > v._ver(); }
        inline bool operator<=(const Version& v) { return _ver() <= v._ver(); }
        inline bool operator>=(const Version& v) { return _ver() >= v._ver(); }

    protected:
        inline int _ver() const { return ((_major << 16) + (_minor << 8) + _patch); }

    private:
        int _major;
        int _minor;
        int _patch;
};

const Version version = {
    @PROJECT_VERSION_MAJOR@,
    @PROJECT_VERSION_MINOR@,
    @PROJECT_VERSION_PATCH@,
};

}
